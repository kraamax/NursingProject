// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProyectoEnfermeria.Models;

namespace ProyectoEnfermeria.Migrations
{
    [DbContext(typeof(SoftwareContext))]
    partial class SoftwareContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.Account", b =>
                {
                    b.Property<string>("User")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("User");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.AnthropometricMeasures", b =>
                {
                    b.Property<int>("IdAnthropometricMeasures")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AbdominalPerimeter")
                        .HasColumnType("float");

                    b.Property<double>("CephalicPerimeter")
                        .HasColumnType("float");

                    b.Property<double>("IMC")
                        .HasColumnType("float");

                    b.Property<string>("Interpretation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PacienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<double>("ThoracicPerimeter")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("IdAnthropometricMeasures");

                    b.HasIndex("PacienteId");

                    b.ToTable("AnthropometricsMeasures");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.Companion", b =>
                {
                    b.Property<string>("IdCompanion")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PacienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCompanion");

                    b.HasIndex("PacienteId");

                    b.ToTable("Companions");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.Docente", b =>
                {
                    b.Property<string>("IdDocente")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BornDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationBiannual")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDocente");

                    b.ToTable("Docentes");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.FamilyBackground", b =>
                {
                    b.Property<int>("IdFamilyBackground")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PacienteId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdFamilyBackground");

                    b.HasIndex("PacienteId");

                    b.ToTable("FamilyBackgrounds");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.GinecoBackground", b =>
                {
                    b.Property<int>("IdGinecoBackground")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("A")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("C")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ciclos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateLastCytology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FUM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("G")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IVS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Menarche")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Menopausia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("P")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PacienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PerformedCytology")
                        .HasColumnType("bit");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGinecoBackground");

                    b.HasIndex("PacienteId");

                    b.ToTable("GinecoBackgrounds");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.Habit", b =>
                {
                    b.Property<int>("IdHabit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdHabit");

                    b.ToTable("Habits");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.LifeStyle", b =>
                {
                    b.Property<int>("IdLifeStyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ExcerciseIdHabit")
                        .HasColumnType("int");

                    b.Property<int?>("HygienicHabitIdHabit")
                        .HasColumnType("int");

                    b.Property<int?>("LeisureIdHabit")
                        .HasColumnType("int");

                    b.Property<int?>("NociveHabitIdHabit")
                        .HasColumnType("int");

                    b.Property<int?>("NutricionalHabitIdHabit")
                        .HasColumnType("int");

                    b.Property<string>("PacienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RestIdHabit")
                        .HasColumnType("int");

                    b.HasKey("IdLifeStyle");

                    b.HasIndex("ExcerciseIdHabit");

                    b.HasIndex("HygienicHabitIdHabit");

                    b.HasIndex("LeisureIdHabit");

                    b.HasIndex("NociveHabitIdHabit");

                    b.HasIndex("NutricionalHabitIdHabit");

                    b.HasIndex("PacienteId");

                    b.HasIndex("RestIdHabit");

                    b.ToTable("LifeStyles");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.Paciente", b =>
                {
                    b.Property<string>("IdPaciente")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BornDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BornPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnostic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HaveDiabetes")
                        .HasColumnType("bit");

                    b.Property<bool>("HaveHipertension")
                        .HasColumnType("bit");

                    b.Property<string>("HealtInstitution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherDiagnostic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleNurseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScholarShip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPaciente");

                    b.HasIndex("AccountUser");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.PersonalBackground", b =>
                {
                    b.Property<int>("IdPersonalBackground")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Allergic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospitalization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PacienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phatological")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surgical")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Traumatic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPersonalBackground");

                    b.HasIndex("PacienteId");

                    b.ToTable("PersonalBackgrounds");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.PhysicalExam", b =>
                {
                    b.Property<int>("IdPhysicalExam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PacienteId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdPhysicalExam");

                    b.HasIndex("PacienteId");

                    b.ToTable("PhysicalExams");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.StudentRequest", b =>
                {
                    b.Property<int>("IdRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmissorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmissorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmissorLastNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmissorLocationBiannual")
                        .HasColumnType("int");

                    b.Property<string>("EmissorNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmissorPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceptorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAccepted")
                        .HasColumnType("bit");

                    b.HasKey("IdRequest");

                    b.ToTable("StudentsRequests");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.VitalSigns", b =>
                {
                    b.Property<int>("IdVitalSigns")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BPD")
                        .HasColumnType("int");

                    b.Property<int>("BPS")
                        .HasColumnType("int");

                    b.Property<double>("BloodPressure")
                        .HasColumnType("float");

                    b.Property<int>("Breath")
                        .HasColumnType("int");

                    b.Property<int>("Glycemia")
                        .HasColumnType("int");

                    b.Property<string>("PacienteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Pulse")
                        .HasColumnType("int");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<string>("TypeGlycemia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdVitalSigns");

                    b.HasIndex("PacienteId");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("BornDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int>("LocationBiannual")
                        .HasColumnType("int");

                    b.Property<string>("Rol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.AnthropometricMeasures", b =>
                {
                    b.HasOne("ProyectoEnfermeria.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.Companion", b =>
                {
                    b.HasOne("ProyectoEnfermeria.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.FamilyBackground", b =>
                {
                    b.HasOne("ProyectoEnfermeria.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.GinecoBackground", b =>
                {
                    b.HasOne("ProyectoEnfermeria.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.LifeStyle", b =>
                {
                    b.HasOne("ProyectoEnfermeria.Models.Habit", "Excercise")
                        .WithMany()
                        .HasForeignKey("ExcerciseIdHabit");

                    b.HasOne("ProyectoEnfermeria.Models.Habit", "HygienicHabit")
                        .WithMany()
                        .HasForeignKey("HygienicHabitIdHabit");

                    b.HasOne("ProyectoEnfermeria.Models.Habit", "Leisure")
                        .WithMany()
                        .HasForeignKey("LeisureIdHabit");

                    b.HasOne("ProyectoEnfermeria.Models.Habit", "NociveHabit")
                        .WithMany()
                        .HasForeignKey("NociveHabitIdHabit");

                    b.HasOne("ProyectoEnfermeria.Models.Habit", "NutricionalHabit")
                        .WithMany()
                        .HasForeignKey("NutricionalHabitIdHabit");

                    b.HasOne("ProyectoEnfermeria.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");

                    b.HasOne("ProyectoEnfermeria.Models.Habit", "Rest")
                        .WithMany()
                        .HasForeignKey("RestIdHabit");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.Paciente", b =>
                {
                    b.HasOne("ProyectoEnfermeria.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountUser");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.PersonalBackground", b =>
                {
                    b.HasOne("ProyectoEnfermeria.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.PhysicalExam", b =>
                {
                    b.HasOne("ProyectoEnfermeria.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");
                });

            modelBuilder.Entity("ProyectoEnfermeria.Models.VitalSigns", b =>
                {
                    b.HasOne("ProyectoEnfermeria.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");
                });
#pragma warning restore 612, 618
        }
    }
}
